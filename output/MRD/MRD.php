<?php
// automatically generated by the FlatBuffers compiler, do not modify

namespace MRD;

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

class MRD extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return MRD
     */
    public static function getRootAsMRD(ByteBuffer $bb)
    {
        $obj = new MRD();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function MRDIdentifier()
    {
        return "MRDE";
    }

    public static function MRDBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::MRDIdentifier());
    }

    public static function MRDExtension()
    {
        return "mrd";
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return MRD
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /**
     * @return sbyte
     */
    public function getType()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \MRD\types::server;
    }

    /**
     * @return sbyte
     */
    public function getAction()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \MRD\actions::getPage;
    }

    public function getData()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startMRD(FlatBufferBuilder $builder)
    {
        $builder->StartObject(3);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return MRD
     */
    public static function createMRD(FlatBufferBuilder $builder, $type, $action, $data)
    {
        $builder->startObject(3);
        self::addType($builder, $type);
        self::addAction($builder, $action);
        self::addData($builder, $data);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addType(FlatBufferBuilder $builder, $type)
    {
        $builder->addSbyteX(0, $type, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addAction(FlatBufferBuilder $builder, $action)
    {
        $builder->addSbyteX(1, $action, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addData(FlatBufferBuilder $builder, $data)
    {
        $builder->addOffsetX(2, $data, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endMRD(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishMRDBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "MRDE");
    }
}
