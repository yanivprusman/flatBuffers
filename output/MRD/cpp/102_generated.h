// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_102_MRD_H_
#define FLATBUFFERS_GENERATED_102_MRD_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

#include "enum100_generated.h"

namespace MRD {

struct MyTable2;
struct MyTable2Builder;

struct MyTable2 FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MyTable2Builder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MY_DATA2 = 4,
    VT_MY_ENUM2 = 6
  };
  const ::flatbuffers::String *my_data2() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MY_DATA2);
  }
  MRD::types my_enum2() const {
    return static_cast<MRD::types>(GetField<int8_t>(VT_MY_ENUM2, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MY_DATA2) &&
           verifier.VerifyString(my_data2()) &&
           VerifyField<int8_t>(verifier, VT_MY_ENUM2, 1) &&
           verifier.EndTable();
  }
};

struct MyTable2Builder {
  typedef MyTable2 Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_my_data2(::flatbuffers::Offset<::flatbuffers::String> my_data2) {
    fbb_.AddOffset(MyTable2::VT_MY_DATA2, my_data2);
  }
  void add_my_enum2(MRD::types my_enum2) {
    fbb_.AddElement<int8_t>(MyTable2::VT_MY_ENUM2, static_cast<int8_t>(my_enum2), 0);
  }
  explicit MyTable2Builder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<MyTable2> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MyTable2>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<MyTable2> CreateMyTable2(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> my_data2 = 0,
    MRD::types my_enum2 = MRD::types_middle) {
  MyTable2Builder builder_(_fbb);
  builder_.add_my_data2(my_data2);
  builder_.add_my_enum2(my_enum2);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<MyTable2> CreateMyTable2Direct(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *my_data2 = nullptr,
    MRD::types my_enum2 = MRD::types_middle) {
  auto my_data2__ = my_data2 ? _fbb.CreateString(my_data2) : 0;
  return MRD::CreateMyTable2(
      _fbb,
      my_data2__,
      my_enum2);
}

inline const MRD::MyTable2 *GetMyTable2(const void *buf) {
  return ::flatbuffers::GetRoot<MRD::MyTable2>(buf);
}

inline const MRD::MyTable2 *GetSizePrefixedMyTable2(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<MRD::MyTable2>(buf);
}

inline const char *MyTable2Identifier() {
  return "MRD2";
}

inline bool MyTable2BufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, MyTable2Identifier());
}

inline bool SizePrefixedMyTable2BufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, MyTable2Identifier(), true);
}

inline bool VerifyMyTable2Buffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<MRD::MyTable2>(MyTable2Identifier());
}

inline bool VerifySizePrefixedMyTable2Buffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<MRD::MyTable2>(MyTable2Identifier());
}

inline const char *MyTable2Extension() {
  return "mrd2";
}

inline void FinishMyTable2Buffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MRD::MyTable2> root) {
  fbb.Finish(root, MyTable2Identifier());
}

inline void FinishSizePrefixedMyTable2Buffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MRD::MyTable2> root) {
  fbb.FinishSizePrefixed(root, MyTable2Identifier());
}

}  // namespace MRD

#endif  // FLATBUFFERS_GENERATED_102_MRD_H_
