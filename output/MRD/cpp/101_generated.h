// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_101_MRD_H_
#define FLATBUFFERS_GENERATED_101_MRD_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

#include "enum100_generated.h"

namespace MRD {

struct MyTable;
struct MyTableBuilder;

struct MyTable FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MyTableBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MY_DATA1 = 4,
    VT_MY_ENUM1 = 6
  };
  const ::flatbuffers::String *my_data1() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MY_DATA1);
  }
  MRD::types my_enum1() const {
    return static_cast<MRD::types>(GetField<int8_t>(VT_MY_ENUM1, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MY_DATA1) &&
           verifier.VerifyString(my_data1()) &&
           VerifyField<int8_t>(verifier, VT_MY_ENUM1, 1) &&
           verifier.EndTable();
  }
};

struct MyTableBuilder {
  typedef MyTable Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_my_data1(::flatbuffers::Offset<::flatbuffers::String> my_data1) {
    fbb_.AddOffset(MyTable::VT_MY_DATA1, my_data1);
  }
  void add_my_enum1(MRD::types my_enum1) {
    fbb_.AddElement<int8_t>(MyTable::VT_MY_ENUM1, static_cast<int8_t>(my_enum1), 0);
  }
  explicit MyTableBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<MyTable> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MyTable>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<MyTable> CreateMyTable(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> my_data1 = 0,
    MRD::types my_enum1 = MRD::types_middle) {
  MyTableBuilder builder_(_fbb);
  builder_.add_my_data1(my_data1);
  builder_.add_my_enum1(my_enum1);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<MyTable> CreateMyTableDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *my_data1 = nullptr,
    MRD::types my_enum1 = MRD::types_middle) {
  auto my_data1__ = my_data1 ? _fbb.CreateString(my_data1) : 0;
  return MRD::CreateMyTable(
      _fbb,
      my_data1__,
      my_enum1);
}

inline const MRD::MyTable *GetMyTable(const void *buf) {
  return ::flatbuffers::GetRoot<MRD::MyTable>(buf);
}

inline const MRD::MyTable *GetSizePrefixedMyTable(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<MRD::MyTable>(buf);
}

inline const char *MyTableIdentifier() {
  return "MRD1";
}

inline bool MyTableBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, MyTableIdentifier());
}

inline bool SizePrefixedMyTableBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, MyTableIdentifier(), true);
}

inline bool VerifyMyTableBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<MRD::MyTable>(MyTableIdentifier());
}

inline bool VerifySizePrefixedMyTableBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<MRD::MyTable>(MyTableIdentifier());
}

inline const char *MyTableExtension() {
  return "mrd1";
}

inline void FinishMyTableBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MRD::MyTable> root) {
  fbb.Finish(root, MyTableIdentifier());
}

inline void FinishSizePrefixedMyTableBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MRD::MyTable> root) {
  fbb.FinishSizePrefixed(root, MyTableIdentifier());
}

}  // namespace MRD

#endif  // FLATBUFFERS_GENERATED_101_MRD_H_
