// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { types } from '../mrd/types.js';


export class MyTable {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):MyTable {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMyTable(bb:flatbuffers.ByteBuffer, obj?:MyTable):MyTable {
  return (obj || new MyTable()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMyTable(bb:flatbuffers.ByteBuffer, obj?:MyTable):MyTable {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new MyTable()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('MRD1');
}

myData1():string|null
myData1(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
myData1(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

myEnum1():types {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : types.middle;
}

static startMyTable(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addMyData1(builder:flatbuffers.Builder, myData1Offset:flatbuffers.Offset) {
  builder.addFieldOffset(0, myData1Offset, 0);
}

static addMyEnum1(builder:flatbuffers.Builder, myEnum1:types) {
  builder.addFieldInt8(1, myEnum1, types.middle);
}

static endMyTable(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishMyTableBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'MRD1');
}

static finishSizePrefixedMyTableBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'MRD1', true);
}

static createMyTable(builder:flatbuffers.Builder, myData1Offset:flatbuffers.Offset, myEnum1:types):flatbuffers.Offset {
  MyTable.startMyTable(builder);
  MyTable.addMyData1(builder, myData1Offset);
  MyTable.addMyEnum1(builder, myEnum1);
  return MyTable.endMyTable(builder);
}
}
