// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { types } from '../mrd/types.js';


export class MyTable2 {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):MyTable2 {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMyTable2(bb:flatbuffers.ByteBuffer, obj?:MyTable2):MyTable2 {
  return (obj || new MyTable2()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMyTable2(bb:flatbuffers.ByteBuffer, obj?:MyTable2):MyTable2 {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new MyTable2()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('MRD2');
}

myData2():string|null
myData2(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
myData2(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

myEnum2():types {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : types.middle;
}

static startMyTable2(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addMyData2(builder:flatbuffers.Builder, myData2Offset:flatbuffers.Offset) {
  builder.addFieldOffset(0, myData2Offset, 0);
}

static addMyEnum2(builder:flatbuffers.Builder, myEnum2:types) {
  builder.addFieldInt8(1, myEnum2, types.middle);
}

static endMyTable2(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishMyTable2Buffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'MRD2');
}

static finishSizePrefixedMyTable2Buffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'MRD2', true);
}

static createMyTable2(builder:flatbuffers.Builder, myData2Offset:flatbuffers.Offset, myEnum2:types):flatbuffers.Offset {
  MyTable2.startMyTable2(builder);
  MyTable2.addMyData2(builder, myData2Offset);
  MyTable2.addMyEnum2(builder, myEnum2);
  return MyTable2.endMyTable2(builder);
}
}
