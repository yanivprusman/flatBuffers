// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_101_MRD_H_
#define FLATBUFFERS_GENERATED_101_MRD_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace MRD {

struct TheTable;
struct TheTableBuilder;

struct TheTable FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TheTableBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA = 4
  };
  const ::flatbuffers::String *data() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyString(data()) &&
           verifier.EndTable();
  }
};

struct TheTableBuilder {
  typedef TheTable Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_data(::flatbuffers::Offset<::flatbuffers::String> data) {
    fbb_.AddOffset(TheTable::VT_DATA, data);
  }
  explicit TheTableBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<TheTable> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<TheTable>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<TheTable> CreateTheTable(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> data = 0) {
  TheTableBuilder builder_(_fbb);
  builder_.add_data(data);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<TheTable> CreateTheTableDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *data = nullptr) {
  auto data__ = data ? _fbb.CreateString(data) : 0;
  return MRD::CreateTheTable(
      _fbb,
      data__);
}

inline const MRD::TheTable *GetTheTable(const void *buf) {
  return ::flatbuffers::GetRoot<MRD::TheTable>(buf);
}

inline const MRD::TheTable *GetSizePrefixedTheTable(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<MRD::TheTable>(buf);
}

inline const char *TheTableIdentifier() {
  return "MRD2";
}

inline bool TheTableBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, TheTableIdentifier());
}

inline bool SizePrefixedTheTableBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, TheTableIdentifier(), true);
}

inline bool VerifyTheTableBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<MRD::TheTable>(TheTableIdentifier());
}

inline bool VerifySizePrefixedTheTableBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<MRD::TheTable>(TheTableIdentifier());
}

inline const char *TheTableExtension() {
  return "mrd2";
}

inline void FinishTheTableBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MRD::TheTable> root) {
  fbb.Finish(root, TheTableIdentifier());
}

inline void FinishSizePrefixedTheTableBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MRD::TheTable> root) {
  fbb.FinishSizePrefixed(root, TheTableIdentifier());
}

}  // namespace MRD

#endif  // FLATBUFFERS_GENERATED_101_MRD_H_
