// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_101_MRD_H_
#define FLATBUFFERS_GENERATED_101_MRD_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace MRD {

struct MyTable;
struct MyTableBuilder;

struct MyTable FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MyTableBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MY_ATA = 4
  };
  const ::flatbuffers::String *my_ata() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MY_ATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MY_ATA) &&
           verifier.VerifyString(my_ata()) &&
           verifier.EndTable();
  }
};

struct MyTableBuilder {
  typedef MyTable Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_my_ata(::flatbuffers::Offset<::flatbuffers::String> my_ata) {
    fbb_.AddOffset(MyTable::VT_MY_ATA, my_ata);
  }
  explicit MyTableBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<MyTable> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MyTable>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<MyTable> CreateMyTable(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> my_ata = 0) {
  MyTableBuilder builder_(_fbb);
  builder_.add_my_ata(my_ata);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<MyTable> CreateMyTableDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *my_ata = nullptr) {
  auto my_ata__ = my_ata ? _fbb.CreateString(my_ata) : 0;
  return MRD::CreateMyTable(
      _fbb,
      my_ata__);
}

inline const MRD::MyTable *GetMyTable(const void *buf) {
  return ::flatbuffers::GetRoot<MRD::MyTable>(buf);
}

inline const MRD::MyTable *GetSizePrefixedMyTable(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<MRD::MyTable>(buf);
}

inline const char *MyTableIdentifier() {
  return "MRD2";
}

inline bool MyTableBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, MyTableIdentifier());
}

inline bool SizePrefixedMyTableBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, MyTableIdentifier(), true);
}

inline bool VerifyMyTableBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<MRD::MyTable>(MyTableIdentifier());
}

inline bool VerifySizePrefixedMyTableBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<MRD::MyTable>(MyTableIdentifier());
}

inline const char *MyTableExtension() {
  return "mrd2";
}

inline void FinishMyTableBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MRD::MyTable> root) {
  fbb.Finish(root, MyTableIdentifier());
}

inline void FinishSizePrefixedMyTableBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MRD::MyTable> root) {
  fbb.FinishSizePrefixed(root, MyTableIdentifier());
}

}  // namespace MRD

#endif  // FLATBUFFERS_GENERATED_101_MRD_H_
