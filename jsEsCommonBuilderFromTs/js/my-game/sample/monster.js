"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Monster = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
const flatbuffers = __importStar(require("flatbuffers"));
const color_js_1 = require("../../my-game/sample/color.js");
const equipment_js_1 = require("../../my-game/sample/equipment.js");
const vec3_js_1 = require("../../my-game/sample/vec3.js");
const weapon_js_1 = require("../../my-game/sample/weapon.js");
class Monster {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsMonster(bb, obj) {
        return (obj || new Monster()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsMonster(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Monster()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    pos(obj) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? (obj || new vec3_js_1.Vec3()).__init(this.bb_pos + offset, this.bb) : null;
    }
    mana() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt16(this.bb_pos + offset) : 150;
    }
    hp() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt16(this.bb_pos + offset) : 100;
    }
    name(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    inventory(index) {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    inventoryLength() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    inventoryArray() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    color() {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : color_js_1.Color.Blue;
    }
    weapons(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? (obj || new weapon_js_1.Weapon()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    weaponsLength() {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    equippedType() {
        const offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : equipment_js_1.Equipment.NONE;
    }
    equipped(obj) {
        const offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
    }
    path(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? (obj || new vec3_js_1.Vec3()).__init(this.bb.__vector(this.bb_pos + offset) + index * 12, this.bb) : null;
    }
    pathLength() {
        const offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    static startMonster(builder) {
        builder.startObject(11);
    }
    static addPos(builder, posOffset) {
        builder.addFieldStruct(0, posOffset, 0);
    }
    static addMana(builder, mana) {
        builder.addFieldInt16(1, mana, 150);
    }
    static addHp(builder, hp) {
        builder.addFieldInt16(2, hp, 100);
    }
    static addName(builder, nameOffset) {
        builder.addFieldOffset(3, nameOffset, 0);
    }
    static addInventory(builder, inventoryOffset) {
        builder.addFieldOffset(5, inventoryOffset, 0);
    }
    static createInventoryVector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startInventoryVector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static addColor(builder, color) {
        builder.addFieldInt8(6, color, color_js_1.Color.Blue);
    }
    static addWeapons(builder, weaponsOffset) {
        builder.addFieldOffset(7, weaponsOffset, 0);
    }
    static createWeaponsVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startWeaponsVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addEquippedType(builder, equippedType) {
        builder.addFieldInt8(8, equippedType, equipment_js_1.Equipment.NONE);
    }
    static addEquipped(builder, equippedOffset) {
        builder.addFieldOffset(9, equippedOffset, 0);
    }
    static addPath(builder, pathOffset) {
        builder.addFieldOffset(10, pathOffset, 0);
    }
    static startPathVector(builder, numElems) {
        builder.startVector(12, numElems, 4);
    }
    static endMonster(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static finishMonsterBuffer(builder, offset) {
        builder.finish(offset);
    }
    static finishSizePrefixedMonsterBuffer(builder, offset) {
        builder.finish(offset, undefined, true);
    }
    static createMonster(builder, posOffset, mana, hp, nameOffset, inventoryOffset, color, weaponsOffset, equippedType, equippedOffset, pathOffset) {
        Monster.startMonster(builder);
        Monster.addPos(builder, posOffset);
        Monster.addMana(builder, mana);
        Monster.addHp(builder, hp);
        Monster.addName(builder, nameOffset);
        Monster.addInventory(builder, inventoryOffset);
        Monster.addColor(builder, color);
        Monster.addWeapons(builder, weaponsOffset);
        Monster.addEquippedType(builder, equippedType);
        Monster.addEquipped(builder, equippedOffset);
        Monster.addPath(builder, pathOffset);
        return Monster.endMonster(builder);
    }
}
exports.Monster = Monster;
