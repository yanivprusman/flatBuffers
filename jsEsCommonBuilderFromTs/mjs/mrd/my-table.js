// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { types } from '../mrd/types.js';
export class MyTable {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsMyTable(bb, obj) {
        return (obj || new MyTable()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsMyTable(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new MyTable()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static bufferHasIdentifier(bb) {
        return bb.__has_identifier('MRD1');
    }
    myData1(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    myEnum1() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : types.middle;
    }
    static startMyTable(builder) {
        builder.startObject(2);
    }
    static addMyData1(builder, myData1Offset) {
        builder.addFieldOffset(0, myData1Offset, 0);
    }
    static addMyEnum1(builder, myEnum1) {
        builder.addFieldInt8(1, myEnum1, types.middle);
    }
    static endMyTable(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static finishMyTableBuffer(builder, offset) {
        builder.finish(offset, 'MRD1');
    }
    static finishSizePrefixedMyTableBuffer(builder, offset) {
        builder.finish(offset, 'MRD1', true);
    }
    static createMyTable(builder, myData1Offset, myEnum1) {
        MyTable.startMyTable(builder);
        MyTable.addMyData1(builder, myData1Offset);
        MyTable.addMyEnum1(builder, myEnum1);
        return MyTable.endMyTable(builder);
    }
}
